package FenceOreGen;

import com.bgsoftware.superiorskyblock.api.SuperiorSkyblockAPI;
import com.bgsoftware.superiorskyblock.api.island.Island;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.metadata.FixedMetadataValue;

import java.util.List;
import java.util.Objects;

public class BlockListener implements Listener {

    private final FenceOreGen plugin;

    public BlockListener(FenceOreGen plugin) {
        this.plugin = plugin;
    }

    /**
     * Xử lý sự kiện người chơi đặt block.
     * Đánh dấu block bằng metadata và cố gắng cập nhật level đảo nếu SuperiorSkyblock2 được bật.
     */
    @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)
    public void onBlockPlace(BlockPlaceEvent event) {
        Block block = event.getBlockPlaced();

        // Gắn metadata để đánh dấu block do người chơi đặt
        block.setMetadata("placed-by-player", new FixedMetadataValue(plugin, true));

        // Cập nhật level đảo nếu đang ở trên đảo và SuperiorSkyblock2 được bật
        if (plugin.getServer().getPluginManager().isPluginEnabled("SuperiorSkyblock2")) {
            Island island = SuperiorSkyblockAPI.getIslandAt(block.getLocation());
            if (island != null) {
                // Bạn có thể muốn thêm một phương thức cụ thể vào SuperiorSkyblockAPI để tính toán lại level
                // hoặc đảm bảo rằng việc đặt block tự động đóng góp vào level đảo.
                // Dòng hiện tại `island.getIslandLevel();` chỉ lấy level chứ không cập nhật nó.
                // Hãy xem xét cách đặt block nên ảnh hưởng đến level đảo dựa trên thiết kế plugin của bạn.
                island.getIslandLevel(); // Dòng này hiện tại chỉ lấy level.
            }
        }
    }

    /**
     * Xử lý sự kiện đập block.
     * Đối với các block mà FenceOreGen quan tâm, chỉ cho phép chúng rơi vật phẩm gốc.
     * Đối với các block khác, sự kiện sẽ không bị can thiệp.
     */
    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onBlockBreak(BlockBreakEvent event) {
        Block block = event.getBlock();
        // Player player = event.getPlayer(); // Không còn cần thiết nếu không tạo item tùy chỉnh

        // Kiểm tra xem block có nên được xử lý bởi FenceOreGen (nghĩa là nó là quặng hoặc block có thể thay thế)
        if (shouldProcess(block)) {
            // Nếu là block mà FenceOreGen quan tâm, chúng ta không làm gì cả.
            // Điều này cho phép block bị phá hủy bình thường và rơi ra vật phẩm gốc của nó.
            // Không có vật phẩm tùy chỉnh nào được tạo ra hoặc đưa cho người chơi.
            // Không có block nào được thay đổi thành AIR hoặc block mới bởi plugin này trong trường hợp này.
            playEffects(); // Vẫn giữ hiệu ứng nếu bạn muốn có âm thanh/hạt khi block được đào
            return;
        }

        // Nếu không phải là block được FenceOreGen xử lý, phương thức này cũng sẽ không làm gì.
        // Block sẽ tự động bị phá hủy và rơi vật phẩm gốc theo mặc định của Minecraft.
    }

    // Các phương thức sau đây không còn được sử dụng trong onBlockBreak nhưng vẫn được giữ lại
    // phòng trường hợp bạn có logic khác sử dụng chúng hoặc muốn tái sử dụng sau này.
    // Nếu bạn chắc chắn không cần chúng, có thể xóa.

    /**
     * Tạo một ItemStack tùy chỉnh cho các quặng được tạo ra.
     * (Không còn được sử dụng trong onBlockBreak theo yêu cầu mới)
     *
     * @param material Loại vật liệu của quặng.
     * @return ItemStack tùy chỉnh.
     */
    private ItemStack createCustomOreItem(Material material) {
        ItemStack oreItem = new ItemStack(material, 1);
        ItemMeta meta = oreItem.getItemMeta();
        if (meta != null) {
            meta.setDisplayName("§6FenceOreGen Ore"); // Sử dụng mã màu Minecraft
            meta.setLore(List.of("§7Generated by FenceOreGen")); // Sử dụng mã màu Minecraft
            oreItem.setItemMeta(meta);
        }
        return oreItem;
    }

    /**
     * Cố gắng thêm vật phẩm vào kho của người chơi, nếu không được thì thả ra đất.
     * (Không còn được sử dụng trong onBlockBreak theo yêu cầu mới)
     *
     * @param player Người chơi nhận vật phẩm.
     * @param item   ItemStack cần đưa.
     */
    private void addItemSafely(Player player, ItemStack item) {
        // Thử thêm vào kho của người chơi trước
        if (player.getInventory().addItem(item).isEmpty()) {
            return; // Vật phẩm đã được thêm hoàn toàn vào kho
        }

        // Nếu không thêm được vào kho, thả vật phẩm tự nhiên tại vị trí của người chơi
        player.getWorld().dropItemNaturally(player.getLocation(), item);
    }

    /**
     * Xác định xem một block có nên được xử lý bởi FenceOreGen hay không.
     * Điều này kiểm tra xem block có phải là loại "_ORE" hay là một trong các block có thể thay thế đã cấu hình.
     *
     * @param block Block cần kiểm tra.
     * @return true nếu block nên được xử lý, ngược lại là false.
     */
    private boolean shouldProcess(Block block) {
        // Đảm bảo thế giới không bị vô hiệu hóa đối với FenceOreGen
        if (plugin.isWorldDisabled(block.getWorld().getName())) {
            return false;
        }

        // Kiểm tra xem block có phải là quặng mặc định của Minecraft hay là một block có thể thay thế đã cấu hình
        return block.getType().toString().endsWith("_ORE") ||
                plugin.getGeneratorManager().getReplaceableBlocks().contains(block.getType());
    }

    /**
     * Phát hiệu ứng hạt và/hoặc âm thanh khi một quặng được tạo ra.
     * TODO: Triển khai các hiệu ứng cụ thể tại đây.
     */
    private void playEffects() {
        // Ví dụ: block.getWorld().spawnParticle(Particle.CLOUD, block.getLocation().add(0.5, 0.5, 0.5), 10);
        // Ví dụ: block.getWorld().playSound(block.getLocation(), Sound.BLOCK_STONE_BREAK, 1.0f, 1.0f);
        // Bạn sẽ cần quyết định các hạt và âm thanh cụ thể.
    }

    /**
     * Xác định loại thế giới (overworld, nether, the_end) dựa trên môi trường của nó.
     * Mặc định là "overworld" nếu thế giới là null hoặc môi trường của nó không xác định.
     *
     * @param world Đối tượng World.
     * @return Một chuỗi đại diện cho loại thế giới.
     */
    private String getWorldType(World world) {
        // Sử dụng Objects.requireNonNullElse để xử lý null một cách rõ ràng hơn.
        return switch (Objects.requireNonNullElse(world, plugin.getServer().getWorlds().get(0)).getEnvironment()) {
            case NETHER -> "nether";
            case THE_END -> "the_end";
            default -> "overworld";
        };
    }
}